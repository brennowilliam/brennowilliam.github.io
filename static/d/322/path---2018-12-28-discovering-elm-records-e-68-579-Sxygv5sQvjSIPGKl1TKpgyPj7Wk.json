{"data":{"site":{"siteMetadata":{"title":"Brenno Ferreira","author":"Brenno Ferreira"}},"markdownRemark":{"id":"f3182b62-10fc-53fb-b790-7288a863b6a9","excerpt":"Objects are present in any JavaScript codebase. As you go by your day writing code, you will use objects all the time. One of the first things I like to learn…","html":"<p>Objects are present in any JavaScript codebase. As you go by your day writing code, you will use objects all the time.</p>\n<p>One of the first things I like to learn when diving into a new language is how to use objects.</p>\n<p>Since Elm is a pure functional language, it does not have support for objects. But, don’t get upset! Elm offers something called record which is a key/value pair data structure very similar to objects in JS.</p>\n<h3>SYNTAX</h3>\n<p>The only difference between the way records are declared from JS, is the use of <code class=\"language-text\">=</code> instead of <code class=\"language-text\">:</code> to separate the key and the value.</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Person</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">age</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Int</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token hvariable\">p1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> “<span class=\"token constant\">Sean</span>”<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">age</span> <span class=\"token operator\">=</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>HOW TO GET AND SET VALUES</h3>\n<p>Using the example before,\nto get the value of a record, you can use the dot notation:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">p1</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">name</span>\n“<span class=\"token constant\">Sean</span>” <span class=\"token operator\">:</span> <span class=\"token constant\">String</span></code></pre></div>\n<p>Elm also provides an unusual way, imho, to get records that looks like a function call.</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token punctuation\">.</span><span class=\"token hvariable\">name</span> <span class=\"token hvariable\">p1</span>\n“<span class=\"token constant\">Sean</span>” <span class=\"token operator\">:</span> <span class=\"token constant\">String</span></code></pre></div>\n<p>I honestly prefer the dot notation!</p>\n<p>Updating values in a record is straight forward.</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token punctuation\">{</span> <span class=\"token hvariable\">p1</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> “<span class=\"token constant\">Bob</span>” <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">-- Returns</span>\n<span class=\"token punctuation\">{</span> <span class=\"token hvariable\">age</span> <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token hvariable\">age</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">number</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since records are immutable, this will NOT modify the record. It will create a new one with the updated value.</p>\n<p>Basically what we are saying here is: Create a new record that contains everything person has, BUT modify the name by setting its value to “Bob”.</p>\n<h3>DIFFERENCES</h3>\n<p>The value of a field will never be undefined or null\nWhen working with records in Elm, you do not need to worry of having a field with no value. Every field in a Elm record must have a value.</p>\n<ol start=\"2\">\n<li>\n<p>You cannot ask for a field that does not exist.\nIf you try to ask for a field that does not exist in the record, Elm compiler will throw an error saying that the property does not exists, making that operation invalid.</p>\n</li>\n<li>\n<p>Since Elm has no support for objects, no more this inside of objects.\nThe use of the this keyword hunts many JavaScript developers. What is the value of this ? When do we need to bind ? Why is this not what I expected ?\nWell, this is over with Elm. No need to worry about that anymore.</p>\n</li>\n</ol>\n<h3>Wrap Up</h3>\n<p>So, this is the basic differences that I could see while working with records in Elm. I could’ve missed other important functionalities that I am not aware at this moment.</p>\n<p>To get a better understanding on this subject, please check this video on my youtube channel, where I show how records work on the elm repl.</p>\n<p>See you next post!</p>","frontmatter":{"title":"Difference between Elm Records and Objects in Other Languages.","date":"December 28, 2018","tags":["elm"]}}},"pageContext":{"slug":"/2018-12-28-Discovering-Elm-Records/","previous":{"fields":{"slug":"/first-post/"},"frontmatter":{"title":"First Post"}},"next":null}}